# Last modified by Alex Smith, 2014-09-01
# Copyright (c) Alex Smith, 2013.
# NetHack may be freely redistributed.  See license for details.
# NetHack 4: aimake configuration.

$version = "4.3.0";
# There's a maximum combined length on the executable info structure.
# So this is written concisely, so as to be able to fit everything in.
$copyright = "(c) Stichting Mathematisch Centrum, Amsterdam, 1985; Alex Smith 2010-2014; Daniel Thaler 2011-2012; and many others";

{
    options => {
        packagename => 'nethack4',
    },
    features => {
        server => {
            description => "Build a server executable (Linux only)",
            object => qr=^path:nethack_server/=,
            default => 0,
        },
        jansson => {
            description => "Use the provided rather than system libjansson",
            object => qr=^path:libjansson/=,
            default => 0,
        },
        gui => {
            description => "Build tiles and faketerm ports (requires SDL2)",
            object => qr=^path:(?:tilesets/(?:dat/ | src/.*tile(?:text)?\.c
                                                   | util/.*tileset)
                                | libuncursed/src/plugins/sdl)=x,
            default => 1,
        },
    },
    rules => {
        _iflags => {
            object => 'optionset:IFLAGS',
            depends => [
                'optstring:-DNETCLIENT',
            ],
            verb => 'determined',
        },
        _xopen_linux => {
            object => 'optionset:CFLAGS',
            command => ['intcmd:assert_equal','optstring:linux', "optstring:$^O"],
            depends => 'optstring:-D_XOPEN_SOURCE=700',
            on_failure => 'conditional'
        },
        _xopen_osx => {
            object => 'optionset:CFLAGS',
            command => ['intcmd:assert_equal','optstring:darwin', "optstring:$^O"],
            depends => 'optstring:-D_XOPEN_SOURCE=700',
            on_failure => 'conditional'
        },
        _darwin_c_source => {
            object => 'optionset:CFLAGS',
            command => ['intcmd:assert_equal','optstring:darwin', "optstring:$^O"],
            depends => 'optstring:-D_DARWIN_C_SOURCE',
            on_failure => 'conditional'
        },
        _cflags => {
            object => 'optionset:CFLAGS',
            depends => [
                'optionset:c11_option',
                'optstring:-fdiagnostics-show-option',
                'optstring:-Wall',
                'optstring:-Wextra',
                'optstring:-Wno-missing-field-initializers',
                # These warnings are probably worth fixing eventually,
                # but have too many false positives to be able to show
                # them right now
                'optstring:-Wno-unused-parameter',
                'optstring:-Wno-sign-compare',
                'optstring:-Wold-style-definition',
                'optstring:-Wstrict-prototypes',
                'optstring:-Wmissing-prototypes',
                'optstring:-Wmissing-declarations',
                'optstring:-Wpointer-arith',
                'optstring:-D_REENTRANT',
            ],
            verb => 'determined',
        },
        _cxxflags => {
            object => 'optionset:CXXFLAGS',
            depends => [
                'optstring:-Wall',
                'optstring:-Wextra',
                'optstring:-Wmissing-declarations',
                'optstring:-Wpointer-arith',
            ],
            verb => 'determined',
        },
        _libraries => {
            output => ['searchlib:z:symbol:compress',
                       'searchlib:png:symbol:png_create_write_struct',
                       'searchlib:pq:symbol:PQsetdbLogin',
                       'searchlib:pthread:symbol:pthread_create',
                       'searchlib:jansson:symbol:json_loads',
                       'searchlib:SDL2:symbol:SDL_Init',
                       'searchlib:ws2_32:symbol:connect'],
            outdepends => [],
            verb => 'determined',
        },

        _warn_about_global_variables => {
            object => "bpath:libnethack/libnethack$dllext",
            command => ['optionset:os_osx_linux',
                        'optionset:maintainer_mode',
                        'cmd:sh',
                        'path:libnethack/util/checkglobals.sh',
                        'optpath::path:libnethack/util/checkglobals.sh',
                        'optpath::'],
            object_dependency => 'nowhere',
            output => [],
        },

        _generate_artinames_h => {
            # artilist.h is compiled twice, once as itself, once as
            # artinames.h. We generate the two versions using the preprocessor
            # directly.
            object => 'bpath:libnethack/include/artilist.h/artilist.h',
            command => ['tool:c_preprocessor', 'optpath::',
                        'optstring:-DARTINAMES_H',
                        'optpath:-o :' .
                        'bpath:libnethack/include/artinames.h/artinames.h'],
            output_from_optpath => '-o ',
            verb => 'generated',
            object_dependency => 'nowhere',
        },

        _statically_link_uncursed_plugins => {
            # Most uncursed plugins are loaded as libraries. However, there's
            # no reason to do that in the case of terminal-based plugins that
            # require no external library support of their own (tty and
            # wincon), so we just link those in directly.
            object => "bpath:libuncursed/src/libuncursed.c/libuncursed$objext",
            depends => "optionset:_uncursed_static_plugins",
        },
        _uncursed_plugins_have_wrappers => {
            object => qr=^bpath:libuncursed/src/plugins/
                         [^/]+\.c/.+\Q$objext\E$=xs,
            command => ['intcmd:echo', 'optpath::'],
            depends => ["extend:$objext:extend:/:extend:.cxx:extend:..:",
                        "optpath::extend:$objext:extend:/:extend:.cxx:extend:..:"],
            require_match => 1,
        },
        _uncursed_plugins_to_link_statically => {
            object => qr=^bpath:libuncursed/src/plugins/
                      (?:wincon|tty)\.c/.+\Q$objext\E$=xs,
            output => 'optionset:_uncursed_static_plugins',
            object_dependency => 'outdepends',
            outdepends => 'optpath::'
        },
        _uncursed_plugins_to_link_dynamically => {
            object => qr=^bpath:libuncursed/src/plugins/
                         (?!wincon\b|tty\b).+\.c/.+\Q$objext\E$=xs,
            command => ['intcmd:echo', 'optpath::'],
            output => "symbolset::bpath:libuncursed/src/plugins/libuncursed_",
            outputarg => qr=^bpath:libuncursed/src/plugins/(.*)\.c=,
            object_dependency => 'outdepends',
            outdepends => 'optpath::'
        },

        _build_desfile => {
            object => qr/^path:.*\.des$/s,
            command => ["bpath:libnethack/util/lev_main.c/lev_main$exeext",
                        # We can't portably produce a "filename with a
                        # trailing slash". So we give a single space
                        # as the file part of the name, and get
                        # lev_main to replace it with the filename.
                        'optpath:-o :bpath:libnethack/dat/ ',
                        'optpath::'],
            actions => [
                {
                    output => qr/^Wrote '(.*)'.$/,
                },
                {
                    output => 'optionset:nhdata_levfiles',
                    outdepends => qr/^Wrote '(.*)'.$/,
                },
            ],
        },
        _levfile_command_line_argument => {
            object => qr/^bpath:.*\.lev$/,
            depends => 'optpath::',
        },

        _specific_version => {
            output => 'optionset:specific_version',
            outdepends => [],
        },
        _git_hash => {
            object => 'optionset:specific_version',
            command => ["cmd:git", "optstring:rev-parse HEAD",
                        "sys:always_rebuild"],
            on_failure => 'conditional',
            in_subdir => 'path:',
            depends => 'optstring: ',
            dependsarg => qr/^([0-9a-f]{8})/,
        },

        _build_man_page => {
            object => 'path:doc/nethack4.6.pod',
            command => ["cmd:pod2man", "optstring:-s 6",
                        "optstring:-n NETHACK4",
                        "optpath:-c :bpath:Games Manual", # hack :-(
                        "optpath::", "optpath::bpath:doc/nethack4.6"],
            output => "bpath:doc/nethack4.6",
            in_subdir => "bpath:", # for the hack above to work
        },

        _makedefs_date => {
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-v :bpath:libnethack/include/date.h",
                        "sys:always_rebuild",
                        "optionset:specific_version"],
            output => 'bpath:libnethack/include/date.h',
        },
        _makedefs_verinfo => {
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-w :bpath:libnethack/include/verinfo.h"],
            output => 'bpath:libnethack/include/verinfo.h',
        },
        _makedefs_onames => {
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-o :bpath:libnethack/include/onames.h"],
            output => 'bpath:libnethack/include/onames.h',
        },
        _makedefs_pm => {
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-p :bpath:libnethack/include/pm.h"],
            output => 'bpath:libnethack/include/pm.h',
        },
        _makedefs_readonly => {
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-m :bpath:libnethack/src/readonly.c"],
            output => 'bpath:libnethack/src/readonly.c',
        },
        _makedefs_data => {
            object => "path:libnethack/dat/data.base",
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-d :",
                        "optpath::bpath:libnethack/dat/data"],
            output => 'bpath:libnethack/dat/data',
        },
        _makedefs_dungeon => {
            object => "path:libnethack/dat/dungeon.def",
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-e :",
                        "optpath::bpath:libnethack/dat/dungeon.pdf"],
            output => 'bpath:libnethack/dat/dungeon.pdf',
        },
        _makedefs_quest => {
            object => "path:libnethack/dat/quest.txt",
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-q :",
                        "optpath::bpath:libnethack/dat/quest.dat"],
            output => 'bpath:libnethack/dat/quest.dat',
        },
        _makedefs_oracles => {
            object => "path:libnethack/dat/oracles.txt",
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optpath:-d :",
                        "optpath::bpath:libnethack/dat/oracles"],
            output => 'bpath:libnethack/dat/oracles',
        },
        _makedefs_rumors => {
            # We rely on the fact that optpath: options given
            # explicitly always stay in the same order.
            command => ["bpath:libnethack/util/makedefs.c/makedefs$exeext",
                        "optstring:-r",
                        "path:libnethack/dat/rumors.tru",
                        "optpath::path:libnethack/dat/rumors.tru",
                        "path:libnethack/dat/rumors.fal",
                        "optpath::path:libnethack/dat/rumors.fal",
                        "optpath::bpath:libnethack/dat/rumors"],
            output => 'bpath:libnethack/dat/rumors',
        },
        _compile_dungeon => {
            object => "bpath:libnethack/dat/dungeon.pdf",
            command => ["bpath:libnethack/util/dgn_main.c/dgn_main$exeext",
                        "optpath::"],
            output => 'bpath:libnethack/dat/dungeon',
        },
        _nhdata => {
            command => ["bpath:libnethack/util/dlb_main.c/dlb_main$exeext",
                        "optpath:cf :bpath:libnethack/dat/nhdat",
                        "optionset:nhdata_levfiles",
                        "bpath:libnethack/dat/data",
                        "bpath:libnethack/dat/dungeon",
                        "bpath:libnethack/dat/oracles",
                        "bpath:libnethack/dat/quest.dat",
                        "bpath:libnethack/dat/rumors",
                        "optpath::bpath:libnethack/dat/data",
                        "optpath::bpath:libnethack/dat/dungeon",
                        "optpath::bpath:libnethack/dat/oracles",
                        "optpath::bpath:libnethack/dat/quest.dat",
                        "optpath::bpath:libnethack/dat/rumors"],
            in_subdir => "bpath:libnethack/dat",
            output => "bpath:libnethack/dat/nhdat",
        },
        _tileset_tilemap => {
            command => ["bpath:tilesets/util/tilemap.c/tilemap$exeext",
                        "path:tilesets/include/tile_h.in",
                        "optpath::path:tilesets/include/tile_h.in",
                        "optpath::bpath:tilesets/include/tile.h",
                        "optpath::bpath:tilesets/dat/maps/nethack4.map"],
            output => ["bpath:tilesets/include/tile.h",
                       "bpath:tilesets/dat/maps/nethack4.map"],
        },
        _merged_tileset_output_location => {
            object => qr=^path:tilesets/dat/catalogues/.*\.txt$=s,
            command => ["intcmd:echo", "optpath::"],
            depends => "optpath:-o :bpath:tilesets/dat/merged/",
            dependsarg => qr=^path:tilesets/dat/catalogues/(.*\.txt)$=s,
            require_match => 1,
        },
        _catalogue_file_size => {
            object => qr=^path:tilesets/dat/catalogues/.*\.txt$=s,
            command => ["intcmd:cat", "optpath::"],
            linemax => 1,
            depends => "optstring:-z ",
            dependsarg => qr=^(\d+ \d+)$=s,
            require_match => 1,
        },
        _catalogue_file_dependencies => {
            object => qr=^path:tilesets/dat/catalogues/.*\.txt$=s,
            command => ["intcmd:cat", "optpath::"],
            lineskip => 1,
            depends => ["optpath::path:tilesets/dat/tiles/",
                        "path:tilesets/dat/tiles/"],
            dependsarg => qr=^(.+)$=s,
            require_match => 1,
        },
        _slashem_catalogue_file_palette => {
            object => qr=^path:tilesets/dat/catalogues/slashem-.*\.txt$=s,
            depends => ["optpath:-p :path:tilesets/dat/palettes/slashem.txt",
                        "path:tilesets/dat/palettes/slashem.txt"],
        },
        _dawnhack_catalogue_file_palette => {
            object => qr=^path:tilesets/dat/catalogues/dawnhack-.*\.txt$=s,
            depends => ["optpath:-p :path:tilesets/dat/palettes/dawnhack.txt",
                        "path:tilesets/dat/palettes/dawnhack.txt"],
        },
        _merge_tilesets => {
            object => qr=^path:tilesets/dat/catalogues/.*\.txt$=s,
            command => ["bpath:tilesets/util/convert_tileset.c/convert_tileset$exeext",
                        "optpath:-m :bpath:tilesets/dat/maps/nethack4.map",
                        "bpath:tilesets/dat/maps/nethack4.map"],
            output_from_optpath => '-o ',
            verb => 'merged',
        },
        _build_tileset_images => {
            object => qr=^bpath:tilesets/dat/merged/.*\.txt$=s,
            command => ["bpath:tilesets/util/export_tileset.c/export_tileset$exeext",
                        "optpath:-o :extend:.png:",
                        "optstring:-t",
                        "optpath::"],
            output_from_optpath => '-o ',
        },
        _build_fonts => {
            object => qr=^path:tilesets/dat/fonts/font14\.txt=s,
            command => ["bpath:tilesets/util/export_tileset.c/export_tileset$exeext",
                        "optpath:-o :extend:.png:",
                        "optstring:-f",
                        "optpath::"],
            output_from_optpath => '-o ',
        },
        _readme_dumps => {
            command => ["intcmd:writefile",
"optstring:This_directory_stores_dumplogs_produced_during_server_play.",
"optstring:When_you_play_locally,_dumplogs_are_saved_in_the_same_place_as_your",
"optstring:save_files_(e.g._~/.config/NetHack4/dumps_on_Linux).",
                        "optpath::bpath:readme-dumps"],
            output => "bpath:readme-dumps",
        },
        _readme_saves => {
            command => ["intcmd:writefile",
"optstring:This_directory_stores_data_shared_between_all_users.",
"optstring:When_you_play_locally,_your_save_files_are_stored_in_your_home",
"optstring:directory_(e.g._~/.config/NetHack4/saves_on_Linux).",
                        "optpath::bpath:readme-saves"],
            output => "bpath:readme-saves",
        },

        # On POSIX platforms, we want a symlink from nethack4 to nethack4-sdl.
        # On Windows, the two executables have different exeparams.
        # Thus, the setup is as follows:
        # nethack/src/main.c/main      # generated executable
        # nethack/src/main.c/nethack4  # console executable
        # nethack/src/sdl/nethack4     # SDL executable
        # nethack/src/sdl/nethack4-sdl # link to nethack4
        _tty_params => {
            object => "bpath:nethack/src/main.c/main$exeext",
            command => ["intcmd:exeparams", "optpath::",
                        "optpath:-o:bpath:nethack/src/main.c/nethack4$exeext",
			"optstring:--info InternalName=nethack4-tty",
			"optstring:--info LegalCopyright=$copyright",
			"optstring:--info FileVersion=$version",
			"optstring:--info ProductVersion=$version",
			"optstring:--info ProductName=NetHack 4",
			"optstring:--info FileDescription=NetHack 4 (console)",
                        "optstring:--console"],
            output_from_optpath => '-o',
        },
        _sdl_params => {
            object => "bpath:nethack/src/main.c/main$exeext",
            command => ["intcmd:exeparams", "optpath::", "optstring:--gui",
                        "optpath:-o:bpath:nethack/src/sdl/nethack4$exeext",
			"optstring:--info InternalName=nethack4-sdl",
			"optstring:--info OriginalFilename=nethack4-sdl.exe",
			"optstring:--info LegalCopyright=$copyright",
			"optstring:--info FileVersion=$version",
			"optstring:--info ProductVersion=$version",
			"optstring:--info ProductName=NetHack 4",
			"optstring:--info FileDescription=NetHack 4 (GUI)",
                        "bpath:tilesets/dat/fonts/font14.png"],
            output_from_optpath => '-o',
        },
        _sdl_link => {
            object => "bpath:nethack/src/sdl/nethack4$exeext",
            command => ["intcmd:symlink", "optpath::",
                        "optpath:-o:bpath:nethack/src/sdl/nethack4-sdl$exeext",
                        "bpath:tilesets/dat/fonts/font14.png"],
            output_from_optpath => '-o',
            verb => 'symlinked',
        },

        _man_sdl_symlink => {
            command => ["intcmd:symlink",
                        "optpath:-o:bpath:doc/nethack4-sdl.6",
                        "optpath::bpath:doc/nethack4.6",
                        "bpath:doc/nethack4.6",
                        "bpath:tilesets/dat/fonts/font14.png"],
            output_from_optpath => '-o',
            verb => 'symlinked',
        },

        install_executables => undef, # we don't want to install most of them
        install_libraries => undef,
        _install_nethack_libraries => {
            object => qr=^bpath:.*libnethack[^/]*\Q$dllext\E$=s,
            install_dir => 'specificlibdir',
        },
        _install_uncursed_plugins => {
            object => qr=^bpath:libuncursed/src/plugins/.*\Q$dllext\E$=s,
            install_dir => 'specificlibdir',
        },
        _install_libuncursed => {
            object => qr=^bpath:libuncursed/src/libuncursed\Q$dllext\E[.\d]*$=s,
            install_dir => 'libdir',
        },
        _install_libjansson => {
            object => qr=^bpath:libjansson/libjansson\Q$dllext\E[.\d]*$=s,
            install_dir => 'libdir',
        },
        _install_tty => {
            object => "bpath:nethack/src/main.c/nethack4$exeext",
            install_dir => "gamesbindir",
            install_elevation => "games",
        },
        _install_sdl => {
            object => "bpath:nethack/src/sdl/nethack4-sdl$exeext",
            install_dir => "gamesbindir",
            install_elevation => "games",
        },
        _install_server => {
            object => "bpath:nethack_server/src/srvmain.c/srvmain$exeext",
            install_dir => "gamesbindir",
            install_name => "nethack4-server$exeext",
            install_permission => "games",
        },
        _install_nhdat => {
            object => "bpath:libnethack/dat/nhdat",
            install_dir => "gamesdatadir",
        },
        _install_images => {
            object => qr{^bpath:tilesets/dat/(?:fonts|merged)/.*\.png$},
            install_dir => "gamesdatadir",
        },
        _install_license => {
            object => "path:libnethack/dat/license",
            install_dir => "gamesdatadir",
        },
        _install_manpage => {
            object => "bpath:doc/nethack4.6",
            install_dir => "mandir",
            install_name => "man6/nethack4.6",
        },
        _install_sdl_manpage => {
            object => "bpath:doc/nethack4-sdl.6",
            install_dir => "mandir",
            install_name => "man6/nethack4-sdl.6",
        },
        _install_highscores => {
            object => "sys:ensure_exists",
            install_dir => "gamesstatedir",
            install_name => "record",
            install_permission => "games",
            install_readable => 1,
        },
        _install_gamesstatedir => {
            object => "sys:touch_only",
            install_dir => "gamesstatedir",
            install_permission => "games",
            install_readable => 1,
        },
        _install_xlogfile => {
            object => "sys:ensure_exists",
            install_dir => "gamesstatedir",
            install_name => "xlogfile",
            install_permission => "games",
            install_readable => 1,
        },
        _install_logfile => {
            object => "sys:ensure_exists",
            install_dir => "gamesstatedir",
            install_name => "logfile",
            install_permission => "games",
            install_readable => 1,
        },
        _install_server_config => {
            object => "sys:ensure_exists",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "configdir",
            install_name => "nethack4.conf",
        },
        _install_server_logfile => {
            object => "sys:ensure_exists",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "logdir",
            install_name => "nethack4.log",
            install_permission => "games",
        },
        _install_server_lockfile => {
            object => "sys:touch_only",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "lockdir",
        },
        _install_server_dumps => {
            object => "sys:create_subdir",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "dumps",
            install_permission => "games",
            install_readable => 1,
        },
        _install_server_completed => {
            object => "sys:create_subdir",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "completed",
            install_permission => "games",
            install_readable => 1,
        },
        _install_server_save => {
            object => "sys:create_subdir",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "save",
            install_permission => "games",
        },
        _install_dumps_note => {
            object => "bpath:readme-dumps",
            command => ["intcmd:nop",
                        "bpath:nethack_server/src/srvmain.c/srvmain$exeext"],
            install_dir => "gamesstatedir",
            install_name => "dumps/README",
        },
        _install_saves_note => {
            object => "bpath:readme-saves",
            install_dir => "gamesstatedir",
            install_name => "README",
        },
#        _install_desktop_file => {
#            object => "path:dist/common/nethack4.desktop",
#            install_dir => "datarootdir",
#            install_name => "applications/nethack4.desktop",
#        },
    },
}
